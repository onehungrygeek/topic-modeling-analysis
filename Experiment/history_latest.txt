time ls
time
ls
exit()
conda
exit()
help()
dir
ir
dir
q
quit
quit()
dir(__builtins__)
help
help(OSError)
ascii(a)
ascii('a')
ascii('4')
ascii(4)
chr(i)
chr('i')
chr(1)
chr(2)
chr(3.3)
chr(3)
q
quit()
import builtins
print(dir(builtins))
quit()
quit
quit()
1.1+1.2
quit()
help(property)
quit()
a = float("inf")
print(a)
a + 1
a * 2
a /5
a / 0
quit()
9+647+394+982+212+469+733+563+259+714+761
5.743+5.29+1.21+1.09+1.38
from dis import dis
dis(range)
print(dis(range))]
print(dis(range))
print(dis(_))
print(dis(print))
import nltk
nltk.download('punkt')
exit
exit()
asdasdasdasdasdsdddddddddddddddddddddddddddddddddddddddddddddddddd
clear
quit()
a = [[1,2], [3,4]]
print(list(zip(*a)))
quit()
5 / 2
5 // 2
quit()
from random import randint as ri
ri(1,20
)
ri(1,20)
from random import randint as ri.CO
from random import randint as r@
from random import randint as r#
r#(1,5)
r(1,5)
quit(
)
3**2*2
2*3**2
quit()
def abc(a,b):
	return True if a == b else False
abc(2,2)
abc(2,3)
quit()
from pyfiglet import Figlet
quit()
from pyfiglet import Figlet
f = Figlet(font='slant')
print f.renderText('text to render')
print(f.renderText('text to render'))
print(f.renderText('My name is Akshay'))
print(f.renderText('!@#$%^&*()_+'))
print(f.renderText('Chatur is a bich'))
print(f.renderText(''))
print(f.renderText('Chatur is a bich'))
print(f.renderText('Skratta Dur Falura Du'))
quit()
import flask
exit(
)
a = []
import sys
sys.getrefcount(a)
sys.getrefcount("")
sys.getrefcount(")
sys.getrefcount("")
sys.getrefcount(" ")
sys.getrefcount("  ")
sys.getrefcount("   ")
sys.getrefcount("    ")
sys.getrefcount("     ")
sys.getrefcount("      ")
sys.getrefcount("	")
sys.getrefcount(" ")
sys.getrefcount({})
sys.getrefcount([])
sys.getrefcount("\")
sys.getrefcount("a")
sys.getrefcount("b")
sys.getrefcount("c")
sys.getrefcount("d")
sys.getrefcount("e")
sys.getrefcount([0, 1, 2])
exit(
)
exit(
5)
ls = [5, 2, 3, 9, 1]
sum = 10
while ls:
    num = ls.pop()
    diff = sum - num
    if diff in ls:
        print([num, diff])
def finder(A, n, tgt):
	for i in range(0, n - 2):
		for j in range(i + 1, n - 1):
			for k in range(j + 1, n):
				if A[i] + A[j] + A[k] == tgt:
					return True
	return False
finder(ls, len(ls), 6)
finder(ls, len(ls) + 1, 6)
finder(ls, len(ls) - 1, 6)
finder(ls, 5 , 6)
finder(ls, 5, 6)
ls
ls = [5,2,3,9,1]
finder(ls, len(ls), 6)
finder(ls, len(ls), 10)
finder(ls, len(ls), 13)
finder(ls, len(ls), 15)
finder(ls, len(ls), 16)
finder(ls, len(ls), 17)
finder(ls, len(ls), 18)
finder(ls, 18)
def f2(A, n, tgt):
	A.sort()
	for i in range(0, n - 2):
		l = i + 1
		r = n - 1
		while (l < r):
			if A[i] + A[l] + A[r] == tgt:
				return True
			elif A[i] + A[l] + A[r] < tgt:
				l += 1
			else:
				r -= 1
	return False
ls
f2(ls, 5, 15)
f2(ls, 5, 6)
f2(ls, 5, 10)
f2(ls, 5, 13)
f2(ls, 5, 14)
f2(ls, 5, 15)
f2(ls, 5, 16)
f2(ls, 5, 17)
f2(ls, 5, 18)
f2(ls, 5, 19)
f2(ls, 5, 20)
f2(ls, 5, 21)
f2(ls, 5, 22)
f2(ls, 5, 20)
def ts(A, tgt):
	indexes = {}
	for i in range(len(A)):
		if i not in indexes:
def ts(nums, tgt):
	idx = {}
	for i, val in enumerate(nums):
		if tgt - val in idx:
			return True
		idx[val] = i
	return False
ls
ts(ls, 12)
ts(ls, 14)
ts(ls, 13)
def threeSum(A, n, tgt):
	A.sort()
	for i in range(0, n - 2):
def threeSum(A, n, tgt):
	for i in range(0, n - 1):
		s = set()
		curr_sum = tgt - A[i]
		for j in range(i + 1, n):
			if curr_sum - A[j] in s:
				return True
			s.add(A[j])
	return False
threeSum(ls, 5, 13)
threeSum(ls, 5, 17)
ls
threeSum(ls, 5, 6)
ls
def trivial(A, n, tgt):
	for i in range(0, n -2)
def trivial(A, n, tgt):
	for i in range(0, n -2):
		for j in range(i + 1, n - 1):
			for k in range(j + 1, n):
				if A[i] + A[j] + A[k] == tgt:
					return True
	return False
trivial(ls, 5, 17)
def fib(n):
	a, b = 0, 1
	while n > 0:
		a, b = b, a + b
		n -= 1
	return a
fib(10)
fib(100)
fib(600)
ls = [-1, -2, 3, 4, 5, 7, 8]
trivial(ls, 7, 0)
trivial(ls, 7, 1)
trivial(ls, 7, 2)
trivial(ls, 7, 3)
exit
exit()
a = 12
b = 7
# Call divmod.
x = divmod(a, b)
# The first part.
print(x[0])
# The second part (remainder).
print(x[1])
x
type(x)
x = divmod(17, 10)
x
x = divmod(170, 10)
x
x = divmod(170, 100)
divmod(170, 100)
divmod(170, 1000)
divmod(1700, 1000)
divmod(01700, 1000)
divmod(0.1700, 1000)
divmod(0.1, 10)
divmod(, 10)
divmod(1, 10)
divmod(10, 10)
divmod(10, 2)
17/10
17%10
17//10
10//2
10%2
x, y = divmod(17,10)
x
y
x, y = 17 % 10, 17 // 10
x
y
xy
x-y
y
exit()
exit
exit()
exit
exit()
import pandas as pd
data = pd.read_json('/home/akshay/Rest/Practice/topic-model-temp/Print Page - HealthcareA.json')
data
data['content']
data['content'][0]
data
data.columns
data['user']
import names
names
names.get_full_name()
names_dict = {}
for id in data['user]:
for id in data['user']:
	names_dict[id] = names.get_full_name()
names_dict
data['user']
data['user'].unique(
)
data.
data.user.astype('category').cat.rename_categories([str(x) for x in range(1,x.name.nunique()+1)])
data.user.astype('category').cat.rename_categories([str(x) for x in range(1,data.user.nunique()+1)])
data['user'].unique()
data.user = data.user.astype('category').cat.rename_categories([str(x) for x in range(1,data.user.nunique()+1)])
data

data = pd.read_json('/home/akshay/Rest/Practice/topic-model-temp/Print Page - HealthcareA.json')
data
data['username'] = data.user.astype('category').cat.rename_categories([names.get_full_name() for x in range(1,data.user.nunique()+1)])
data
data['username']
data['username'].unique()
import json
list1 = open('/home/akshay/Rest/Practice/topic-model-temp/Print Page - HealthcareA.json')
list1
type(list1)
list1.read()
list1 = open('/home/akshay/Rest/Practice/topic-model-temp/Print Page - HealthcareA.json')
list1.read()
new = json.dumps(list1)
with open('/home/akshay/Rest/Practice/topic-model-temp/Print Page - HealthcareA.json') as f:
	new_json = json.loads(f.read())
new_json
type(new_json)
with open('/home/akshay/Rest/Practice/topic-model-temp/Print Page - HealthcareB.json') as f:
	new_jsonB = json.loads(f.read())
with open('/home/akshay/Rest/Practice/topic-model-temp/Inputs/JSON/Health/Health-JSON/Print Page - HealthcareB.json') as f:
	new_jsonB = json.loads(f.read())
latest = {new_json + new_jsonB}
list_new = new_json + new_jsonB
list_new
type(list_new)
json_dict = dict(list_new)
to_json = json.dumps(list_new)
to_json
from pprint import pprint
pprint(to_json)
tojson_file = open('tojson_file', 'w')
tojson_file.write(to_json)
new_df = pd.read_json('tojson_file')
new_df = pd.read_json('tojson_file.json')
new_df
new_df.head
new_df.head(3)
new_df
import ipython
import readline
readline.write_history_file('history.txt')
new_df.shape
import time
timestr = time.strftime("%Y%m%d-%H%M%S")
print timestr
timestr
timestr = time.strftime("%Y-%m-%d-%H:%M:%S")
timestr
time_string = time.strftime("%m-%d-%Y_%H-%M-%S")
time_string
time_string = time.strftime("%m-%d-%Y_%H-%M-%S")
time_string
model = 'LdaModel'
model.strip('Model')
model_name = model.strip('Model')
model_name
a = 'b' + model.strip('Model')
a
readline.write_history_file('history_latest.txt')
